#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

void queue1(int *arrival, int *burst, int *priority, int n) {
    int time = 0;

    for (int i = 0; i < n; i++) {
        int min_arrival_time = INT_MAX;
        int min_arrival_index = -1;

        for (int j = i; j < n; j++) {
            if (arrival[j] <= time && priority[j] < min_arrival_time) {
                min_arrival_time = priority[j];
                min_arrival_index = j;
            }
        }

        if (min_arrival_index == -1) {
            continue;
        }

        int execute_time = (burst[min_arrival_index] < 2) ? burst[min_arrival_index] : 2;
        burst[min_arrival_index] -= execute_time;

        printf("Process %d (Priority %d) is executing for %d sec in Queue 1\n",
               min_arrival_index + 1, priority[min_arrival_index], execute_time);

        time += execute_time;

        if (burst[min_arrival_index] > 0) {
            priority[min_arrival_index]++;
            printf("Process %d preempted and moved to Queue 2\n", min_arrival_index + 1);
        }
    }
}

void queue2(int *burst, int n) {
    int time_quantum = 4;
    int remaining_burst[n];

    for (int i = 0; i < n; i++) {
        remaining_burst[i] = burst[i];
    }

    int time = 0;
    int flag = 0;

    while (1) {
        flag = 0;
        for (int i = 0; i < n; i++) {
            if (remaining_burst[i] > 0) {
                flag = 1;

                if (remaining_burst[i] <= time_quantum) {
                    time += remaining_burst[i];
                    printf("Process %d is executing for %d sec in Queue 2\n", i + 1, remaining_burst[i]);
                    remaining_burst[i] = 0;
                } else {
                    time += time_quantum;
                    remaining_burst[i] -= time_quantum;
                    printf("Process %d is executing for %d sec in Queue 2\n", i + 1, time_quantum);
                }
            }
        }

        if (flag == 0) {
            break;
        }
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int arrival[n], burst[n], priority[n];

    for (int i = 0; i < n; i++) {
        printf("Enter arrival time, burst time, and priority for Process %d : ", i + 1);
        scanf("%d %d %d", &arrival[i], &burst[i], &priority[i]);
    }

    queue1(arrival, burst, priority, n);
    queue2(burst, n);

    return 0;
}
