#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

struct Process {
    int id;         
    int arrival;    
    int burst;      
    int priority;   
};

void queue1(struct Process *processes, int n) {
    
   

    int time = 0;  

    for (int i = 0; i < n; i++) {
        int min_arrival_time = INT_MAX;
        int min_arrival_index = -1;

        for (int j = i; j < n; j++) {
            if (processes[j].arrival <= time && processes[j].priority < min_arrival_time) {
                min_arrival_time = processes[j].priority;
                min_arrival_index = j;
            }
        }

        if (min_arrival_index == -1) {
            continue;
        }

        
        int execute_time = (processes[min_arrival_index].burst < 2) ? processes[min_arrival_index].burst : 2;
        processes[min_arrival_index].burst -= execute_time;

        
        printf("Process %d (Priority %d) is executing for %d sec in Queue 1\n",
               processes[min_arrival_index].id, processes[min_arrival_index].priority, execute_time);

        time += execute_time;

        
        if (processes[min_arrival_index].burst > 0) {
            processes[min_arrival_index].priority++;  
            printf("Process %d preempted and moved to Queue 2\n", processes[min_arrival_index].id);
        }
    }
}

void queue2(struct Process *processes, int n) {
    

    int time_quantum = 4;  
    int remaining_burst[n];  

    for (int i = 0; i < n; i++) {
        remaining_burst[i] = processes[i].burst;
    }

    int time = 0;
    int flag = 0;

    while (1) {
        flag = 0;
        for (int i = 0; i < n; i++) {
            if (remaining_burst[i] > 0) {
                flag = 1;  

                if (remaining_burst[i] <= time_quantum) {
                    
                    time += remaining_burst[i];
                    printf("Process %d is executing for %d sec in Queue 2\n", processes[i].id, remaining_burst[i]);
                    remaining_burst[i] = 0;
                } else {
                    
                    time += time_quantum;
                    remaining_burst[i] -= time_quantum;
                    printf("Process %d is executing for %d sec in Queue 2\n", processes[i].id, time_quantum);
                }
            }
        }

        if (flag == 0) {
            break;  
        }
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

   
    for (int i = 0; i < n; i++) {
    processes[i].id = i + 1;
    printf("Enter arrival time, burst time, and priority for Process %d : ", i + 1);
    scanf("%d %d %d", &processes[i].arrival, &processes[i].burst, &processes[i].priority);
}


    queue1(processes, n);  
    queue2(processes, n);  

    return 0;
}
